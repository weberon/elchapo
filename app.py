import logging

import requests
from os import getenv
from dotenv import load_dotenv
from flask import Flask, redirect, jsonify
from flask import request, jsonify

from constants import WEBHOOK, NOT_FOUND_URL, SECRET_KEY
from models import ShortURL, RequestLogger
from zappa.asynchronous import task
from utils import get_now, fetch_request_metadata, generate_short_url

logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

# Load environment variables from .env file
load_dotenv()

MAIN = False

app = Flask(__name__, static_url_path='/no_static')


@app.after_request
def after_request(response):
		response.headers.add('Access-Control-Allow-Origin', '*')
		response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
		return response


@app.route('/c', methods=['POST'])
def create_url():
		path = request.json.get("path", None)
		secret_key = request.json.get("secret_key", None)
		redirect_url = request.json.get("redirect_url", None)
		webhook = request.json.get('webhook', None)

		# Notify the user for unauthenticated requests
		if secret_key != getenv("SECRET_KEY"):
			return jsonify(
				message="Credentials missing in the request.", error="Unauthorized request."), 401
		# Notify the user is redirect url is not present in the body
		if not redirect_url:
			return jsonify(message="The URL to redirect to, is missing in the request.", error="Missing key details"), 400
		
		# Check if the path is present in the request body
		if path:
			try:
				ShortURL.get(path)
				return "", 409
			except ShortURL.DoesNotExist:
				ShortURL(url=path, redirection_url=redirect_url, webhook=webhook).save()
				return jsonify(success=True), 200
		# Create a short url for the request
		else:
			# The short url generation function by default returns a 5-character short url
			short_url = generate_short_url()
			ShortURL(url=short_url, redirection_url=redirect_url, webhook=webhook).save()
			return jsonify(message="A short url path was not specified. A randomly created short url was generated by the application.", generated_short_url=short_url, success=True), 200

@task
def call_url(url):
		if url:
				retry = 3
				while retry > 0:
						x = requests.get(url)
						if x.status_code >= 400:
								retry = retry - 1
						else:
								return x.text


def get_hook(webhook, path):
		if webhook:
				if webhook.__contains__('?'):
						webhook += '&path=%s' % path
				else:
						webhook += '?path=%s' % path
		return webhook


@app.route('/<path:path>', methods=['GET'])
def redirect_url(path):
		try:
				short_url = ShortURL.get(path)
				webhook = WEBHOOK
				if short_url.webhook:
						webhook = short_url.webhook
				webhook = get_hook(webhook, path)
				if webhook:
						call_url(webhook)
				# Fetch the metadata from the request
				metadata = fetch_request_metadata(request)
				# Create a document in the RequestLogger table in DynamoDB for further inspection
				document = RequestLogger(short_url=path, request=metadata)
				document.save()
				return redirect(short_url.redirection_url, code=302)
		except ShortURL.DoesNotExist:
				return jsonify(error="Not found"), 404

@app.route('/<path:path>', methods=['PATCH'])
def update_url(path):
	webhook = request.json.get("webhook", None)
	redirect_url = request.json.get("redirect_url", None)
	secret_key = request.json.get("secret_key", None)

	# Return a 401 if the request is not authenticated
	if secret_key and secret_key != getenv("SECRET_KEY"):
		return jsonify(message="Credentials missing in the request or the value of the secret key does not match.", error="Unauthorized request."), 401
	try:
		# Fetch the document with the associated short url
		document = ShortURL.get(path)
		# Modify the document to include both, if the webhook is specified
		if webhook and redirect_url:
			document.webhook = webhook
			document.redirection_url = redirect_url
			# Update the timestamp to reflect the new timestamp
			document.created_at = get_now()
			document.save()
			return jsonify(message="Your request to perform a partial update on the resource is successful.", short_url=document.url, redirect_url= document.redirection_url, webhook=document.webhook,timestamp=document.created_at), 200
		# Modify only the re-direction URL otherwise
		elif redirect_url:
			document.redirection_url = redirect_url
			# Update the timestamp to reflect the new timestamp
			document.created_at = get_now()
			document.save()
			return jsonify(message="Your request to perform a partial update on the resource is successful.", short_url=document.url, redirect_url= document.redirection_url,timestamp=document.created_at), 200
		else:
			return jsonify(message="The request body does not contain any redirection URL or webhook. Hence this request cannot be processed for this method.", error="Bad request"), 400
	# Return a 404 if it is not found in the database
	except ShortURL.DoesNotExist:
		return jsonify(message="The given Short URL does not exist as a document", error="Not found"), 404

# We only need this for local development.
if __name__ == '__main__':
		MAIN = True
		app.run(host='0.0.0.0', port=5601,debug=True)
